generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OPERATOR
  USER
}

enum AttributeType {
  STRING
  NUMBER
  SELECT
}

// Новий ENUM для провайдерів платежів
enum PaymentProvider {
  LIQPAY
  PAYPAL
  MONOBANK
  CASH
  CARD
  STRIPE
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  role               Role      @default(USER)
  name               String?
  phone              String?
  avatar             String?
  isActive           Boolean   @default(true)
  lastLogin          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  hashedRefreshToken String?
  Order              Order[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryAttributes CategoryAttribute[]
  products           Product[]

  @@map("categories")
}

model Attribute {
  id        String        @id @default(uuid())
  name      String        @unique
  type      AttributeType
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  categoryAttributes CategoryAttribute[]
  attributeValues    AttributeValue[]

  @@map("attributes")
}

model CategoryAttribute {
  id String @id @default(uuid())

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String

  @@unique([categoryId, attributeId])
  @@map("category_attributes")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images          ProductImage[]
  attributeValues AttributeValue[]
  ProductStock    ProductStock[]
  OrderItem       OrderItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_images")
}

model AttributeValue {
  id          String    @id @default(uuid())
  value       String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String

  @@map("attribute_values")
}

model Warehouse {
  id           String         @id @default(uuid())
  name         String
  address      String?
  city         String?
  phone        String?
  description  String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductStock ProductStock[]

  @@map("warehouses")
}

model ProductStock {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String

  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String

  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, warehouseId])
  @@map("product_stocks")
}

// -------------------------
// Додаємо нові енумки для статусів
// -------------------------

enum OrderStatus {
  NEW
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  SENT
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

// -------------------------
// Нові моделі для замовлень, історії, оплат
// -------------------------

model Order {
  id             String               @id @default(uuid())
  userId         String?
  user           User?                @relation(fields: [userId], references: [id])
  customerName   String?
  customerPhone  String?
  customerEmail  String?
  deliveryType   String?
  deliveryData   Json?
  status         OrderStatus          @default(NEW)
  paymentStatus  PaymentStatus        @default(PENDING)
  deliveryStatus DeliveryStatus       @default(PENDING)
  comment        String?
  totalPrice     Decimal?
  currency       String?
  items          OrderItem[]
  payment        Payment[]
  statusHistory  OrderStatusHistory[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@map("orders")
}

model OrderItem {
  id                  String   @id @default(uuid())
  orderId             String
  order               Order    @relation(fields: [orderId], references: [id])
  productId           String
  product             Product  @relation(fields: [productId], references: [id])
  quantity            Int
  price               Decimal
  productName         String
  productCategoryId   String?
  productCategoryName String?
  isActive            Boolean?

  @@map("order_items")
}

model Payment {
  id         String          @id @default(uuid())
  orderId    String
  order      Order           @relation(fields: [orderId], references: [id])
  amount     Decimal
  status     PaymentStatus
  provider   PaymentProvider
  method     String?
  externalId String?
  paidAt     DateTime?
  createdAt  DateTime        @default(now())
  currency   String?

  @@map("payments")
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  comment   String?
  createdAt DateTime    @default(now())

  @@map("order_status_history")
}
