generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OPERATOR
  USER
}

enum AttributeType {
  STRING
  NUMBER
  SELECT
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  role               Role      @default(USER)
  name               String?
  phone              String?
  avatar             String?
  isActive           Boolean   @default(true)
  lastLogin          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  hashedRefreshToken String?

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryAttributes CategoryAttribute[]
  products           Product[]

  @@map("categories")
}

model Attribute {
  id        String        @id @default(uuid())
  name      String        @unique
  type      AttributeType
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  categoryAttributes CategoryAttribute[]
  attributeValues    AttributeValue[]

  @@map("attributes")
}

model CategoryAttribute {
  id String @id @default(uuid())

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String

  @@unique([categoryId, attributeId])
  @@map("category_attributes")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images          ProductImage[]
  attributeValues AttributeValue[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_images")
}

model AttributeValue {
  id          String    @id @default(uuid())
  value       String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String

  @@map("attribute_values")
}
